===================
高级话题
===================

.. contents:: 目录

------------------

对用RapydScript编写大型项目的开发者来说,本节包含多个你感兴趣的话题。但是对刚刚接触RapydScript的开发者就不是那么有关。本节关注的主题有使代码保持整洁、优化的编码惯例，介绍RapydScript之外的库，以及关于自已编写库的建议。

浏览器兼容性
------------------

默认地，RapydScript编译的代码能够在支持HTML5以及较老的IE6-8等浏览器上运行。为此，编译器有时会生成一些相当混乱和低效的代码。根据2013年9月的统计，世界上少于8%的电脑正在使用IE8。如果你知晓你的用户不会使用老版本的浏览器，那么在执行编译的时候你可以添加 `--screw-ie8` 选项以生成更简洁、速度更快的代码。

编码惯例
------------------

不难看出，RapydScript是一门比JavaScript更简洁的语言。尽管如此，与所有的动态类型语言一样（包括Python），如果你不遵循一些编码惯例，那么你很容易搬迁石头砸中自己的脚。当然，之所以称其为惯例，是因为如果你已经有自己的一套编码习惯，或者其中有些你并不认同，那么你完全可以不这样做。

``````````````````````
Tab与空格
``````````````````````

这看起来似乎有些矛盾，Python的编码惯例是使用4个空格进行缩进，但是大部分打包的RapydScript源代码却是使用的一个tab缩进。这是由于旧版本的RapydScript依赖的是tab，但为了保持与Python和JavaScript社区习惯一致，新版本的RapydScript开始使用空格。喜欢使用那种方式，根据你的习惯吧。但是，如果你打算向RapydScript提供代码，为与库中的其余代码保持一致，那么你必须使用空格。

``````````````````````
object的写法与Hashe/Dict
``````````````````````

在JavaScript中，将对象的写法与哈希表是一样的，因此将它们看作是相同的东西，但我并不喜欢这种方式。你可以看一下Google的Closure 编译器（JavaScript的代码压缩和优化工具）在设置ADVANACED_OPTIMIZATIONS选项时因此出现的一些问题，它实际上会破坏大量看似良好的JavaScript代码。主要问题是这些代码试图在同一位置重命名方法或变量。我的建议就是一定要将对象和哈希表的写法严格区分开来，最基本的就是关键字的引号。这么做的额外好处就是，你的代码有机会更好地通过Closure编译器。

下面有一个例子： :: 

    obj = {
        foo:    1,
        bar:    def(): print('bar' + str(foo))
    }
    hash = {
        'foo':  1,
        'bar':  def(): print('bar' + str(foo))
    }

    obj.bar()       # good
    obj['bar']()    # bad

    hash.bar()      # bad
    hash['bar']()   # good


``````````````````````
分号
``````````````````````

绝不要滥用分号。它的意义在于提供一个方法将逻辑相关代码放在一起，而不是将整个web应用写在一行。下面是个不错的示例： :: 

    X = 0; Y = 1

尽管如此，任何需要使用两个以上分号或者包含一长串数学计算的代码都最好写成多行。虽然决定权在你手中，但是如果代码的逻辑要求放在多行才能更好地读懂，那么你最好还是不要使用分号。下面例子中的斐波那契函数算是展示了如何最大限度的使用分号： :: 

    fib = def(x): if x<=1: return 1; return fib(x-1)+fib(x-2)

即便如此，对这个例子而言，我个人还是建议写成多行代码。

``````````````````````
jQuery的元素
``````````````````````

如果你在程序中使用了jQuery，那么你应该多次将其保存在变量中。如果你写过大一点的程序，那么你一定曾经将空元素和封装元素搞错过。特别是对于 `canvas` 这样的对象，你常需要直接读取属性和方法。我的解决方法很简单，就是在封装的元素的变量名前面加上前缀 `$` ： :: 

    $canvas = $('<canvas></canvas>')
    canvas = $canvas.get(0)
    ctx = canvas.getContext('2d')
    $canvas.appendTo(document)

把这种方式用在函数的定义中特别不错，因此你可以仅查看函数的签名就能立刻知道需要给变量传递的对象类型。

``````````````````````
库
``````````````````````

我建议开发者还是尽可能地使用原生JavaScript代码编写的库，而不是使用 `math.pyj` 和 `re.pyj` 。尽管这些库对Python的模仿不存在问题，并且也工作良好，但是却会给你的程序带来不必要的开销。此外，我认为Python中的 `re` 库显得有些复杂，而JavaScript的 `RegExp` 与之相比就要简单得多。虽然那么说，但如果试图将Python中的一些大型项目移植到web端，那么这些库还是显得极为有用。但是如果你正在编写完全新的代码，如果你决定采用JavaScript库（比如 `Math` 和 `RegExp` ）替代的话将可能会更加容易维护。

``````````````````````
外部的库或类
``````````````````````

RapydScript可以取得任何你编写的或者用原生JavaScript编写的类。但是，它不能取得外部框架代码中的类。解决办法有两种，一种是使用 `@external` 装饰器，另一种是在对象声明时使用 `new` 操作符。为保持代码的易读和贯通，有很多理由使得我强烈偏向于使用 `@external` 装饰器，尽管有些繁琐：

 - `@external` 装饰器使任何阅读你代码的人都可以清晰地看到类的声明
 - 使用了 `@external` 声明的类能够导入到其他模块进行复用
 - 比起忘记使用import，开发者更容易忘记在声明对象时对单个实例使用 `new` 操作符，这是因为忘记使用 `new` 操作符更不容易通过debug发现。
























































